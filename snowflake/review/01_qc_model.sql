-- Reviewer QC script for a candidate's MODEL schema
-- Set candidate code and database; run with a role that has SELECT on MODEL (e.g., ETL_REVIEWER)

SET DB_NAME = 'ETL_INTERVIEW';
SET CAND = 'C01';
SET MODEL = $CAND || '_MODEL';

USE DATABASE IDENTIFIER($DB_NAME);
USE SCHEMA IDENTIFIER($MODEL);

-- Row counts
SELECT 'DIM_CUSTOMER' AS table_name, COUNT(*) AS row_count FROM DIM_CUSTOMER
UNION ALL SELECT 'DIM_CARRIER', COUNT(*) FROM DIM_CARRIER
UNION ALL SELECT 'DIM_EQUIPMENT', COUNT(*) FROM DIM_EQUIPMENT
UNION ALL SELECT 'DIM_LOCATION', COUNT(*) FROM DIM_LOCATION
UNION ALL SELECT 'DIM_LANE', COUNT(*) FROM DIM_LANE
UNION ALL SELECT 'DIM_DATE', COUNT(*) FROM DIM_DATE
UNION ALL SELECT 'FACT_SHIPMENT', COUNT(*) FROM FACT_SHIPMENT
UNION ALL SELECT 'FACT_EVENT', COUNT(*) FROM FACT_EVENT
UNION ALL SELECT 'FACT_COST', COUNT(*) FROM FACT_COST
ORDER BY table_name;

-- PK uniqueness checks (expect 0 duplicates)
SELECT 'DIM_CUSTOMER' AS table_name, COUNT(*) AS dup_pk
FROM (
  SELECT CUSTOMER_ID FROM DIM_CUSTOMER GROUP BY CUSTOMER_ID HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'DIM_CARRIER', COUNT(*) FROM (
  SELECT CARRIER_ID FROM DIM_CARRIER GROUP BY CARRIER_ID HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'DIM_EQUIPMENT', COUNT(*) FROM (
  SELECT EQUIPMENT_ID FROM DIM_EQUIPMENT GROUP BY EQUIPMENT_ID HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'DIM_LOCATION', COUNT(*) FROM (
  SELECT LOC_ID FROM DIM_LOCATION GROUP BY LOC_ID HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'DIM_LANE', COUNT(*) FROM (
  SELECT LANE_ID FROM DIM_LANE GROUP BY LANE_ID HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'DIM_DATE', COUNT(*) FROM (
  SELECT DATE_KEY FROM DIM_DATE GROUP BY DATE_KEY HAVING COUNT(*) > 1
) d
UNION ALL
SELECT 'FACT_SHIPMENT (SHIPMENT_ID,LEG_ID)', COUNT(*) FROM (
  SELECT SHIPMENT_ID, LEG_ID FROM FACT_SHIPMENT GROUP BY SHIPMENT_ID, LEG_ID HAVING COUNT(*) > 1
) d
ORDER BY table_name;

-- FK coverage: shipments -> dims (expect 0 missing)
SELECT 'CARRIER_ID' AS fk, COUNT(*) AS missing
FROM FACT_SHIPMENT s LEFT JOIN DIM_CARRIER d ON s.CARRIER_ID = d.CARRIER_ID
WHERE d.CARRIER_ID IS NULL AND s.CARRIER_ID IS NOT NULL
UNION ALL
SELECT 'CUSTOMER_ID', COUNT(*) FROM FACT_SHIPMENT s LEFT JOIN DIM_CUSTOMER d ON s.CUSTOMER_ID = d.CUSTOMER_ID WHERE d.CUSTOMER_ID IS NULL AND s.CUSTOMER_ID IS NOT NULL
UNION ALL
SELECT 'EQUIPMENT_ID', COUNT(*) FROM FACT_SHIPMENT s LEFT JOIN DIM_EQUIPMENT d ON s.EQUIPMENT_ID = d.EQUIPMENT_ID WHERE d.EQUIPMENT_ID IS NULL AND s.EQUIPMENT_ID IS NOT NULL
UNION ALL
SELECT 'ORIGIN_LOC_ID', COUNT(*) FROM FACT_SHIPMENT s LEFT JOIN DIM_LOCATION d ON s.ORIGIN_LOC_ID = d.LOC_ID WHERE d.LOC_ID IS NULL AND s.ORIGIN_LOC_ID IS NOT NULL
UNION ALL
SELECT 'DEST_LOC_ID', COUNT(*) FROM FACT_SHIPMENT s LEFT JOIN DIM_LOCATION d ON s.DEST_LOC_ID = d.LOC_ID WHERE d.LOC_ID IS NULL AND s.DEST_LOC_ID IS NOT NULL
UNION ALL
SELECT 'LANE_ID', COUNT(*) FROM FACT_SHIPMENT s LEFT JOIN DIM_LANE d ON s.LANE_ID = d.LANE_ID WHERE d.LANE_ID IS NULL AND s.LANE_ID IS NOT NULL
ORDER BY fk;

-- Events and costs reference shipments (expect 0 missing)
SELECT 'EVENT -> SHIPMENT' AS rel, COUNT(*) AS missing
FROM FACT_EVENT e LEFT JOIN FACT_SHIPMENT s ON e.SHIPMENT_ID = s.SHIPMENT_ID
WHERE s.SHIPMENT_ID IS NULL AND e.SHIPMENT_ID IS NOT NULL
UNION ALL
SELECT 'COST -> SHIPMENT', COUNT(*) FROM FACT_COST c LEFT JOIN FACT_SHIPMENT s ON c.SHIPMENT_ID = s.SHIPMENT_ID WHERE s.SHIPMENT_ID IS NULL AND c.SHIPMENT_ID IS NOT NULL
ORDER BY rel;

-- Basic sanity metrics (delivery completeness)
SELECT
  COUNT_IF(DELIVERY_ACTUAL_TS IS NOT NULL) AS delivered_cnt,
  COUNT_IF(DELIVERY_ACTUAL_TS IS NULL) AS in_flight_cnt
FROM FACT_SHIPMENT;

